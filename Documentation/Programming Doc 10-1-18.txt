Date: 10/1/18

Topic: Rewriting the framework, again.
	Determining control system.
	Determining physics conersions.

Pseudocode:

double CURRENT_DISTANCE;

double ARRAY_1[DISTANCE, ANGLE];
double ARRAY_2[DISTANCE, ANGLE];
double ARRAY_3[DISTANCE, ANGLE];

	case(result from parsed value)
	switch L:
		write data to arrays
	break;
if(CURRENT_DISTANCE < ARRAY_1[0]) {
	if (CURRENT_ANGLE < (SET_ANGLE - 5)) {
		MOTOR_LM->(ControlMode::Velocity, /*Number*/ + /*Another Number*/);
		MOTOR_RM->(ControlMode::Velocity, /*Number*/);
	} else if (CURRENT_ANGLE > SET_ANGLE) {
		MOTOR_LM->(ControlMode::Velocity, /*Number*/);
		MOTOR_RM->(ControlMode::Velocity, /*Number*/ + /*Another Number*/);
	} else {
		MOTOR_LM->(ControlMode::Velocity, /*Number*/);
		MOTOR_RM->(ControlMode::Velocity, /*Number*/);
	}
} else if (CURRENT_DISTANCE >= ARRAY[0]) {
	turn left/right
	CURRENT_ANGLE = ARRAY_1[1];
	run turn or left

} else if (CURRENT_DISTANCE < ARRAY_2[0]) {
	if (CURRENT_ANGLE < (SET_ANGLE - 5)) {
		MOTOR_LM->(ControlMode::Velocity, /*Number*/ + /*Another Number*/);
		MOTOR_RM->(ControlMode::Velocity, /*Number*/);
	} else if (CURRENT_ANGLE > SET_ANGLE) {
		MOTOR_LM->(ControlMode::Velocity, /*Number*/);
		MOTOR_RM->(ControlMode::Velocity, /*Number*/ + /*Another Number*/);
	} else {
		MOTOR_LM->(ControlMode::Velocity, /*Number*/);
		MOTOR_RM->(ControlMode::Velocity, /*Number*/);
	}
} repeat {
	...repeat until reaching a certain point...
	...swap to vision...
} else if (distance>final set) {
	if (currentangle<vision data) {
		...Run straight line interations
	{
} else if (distancesonic < sonic) {
	cube.deploy
}

current elev position = rotation scale * enocoder angular velocity * time = tangential position on elevator + acculamated position
vs 
current elev position = rotation scale * accumalated degreees = tangential position

scale_elev = 2 * pi * radius_elev (1)
scale_winch = 2 * pi * radius_winch (0.5)

int ELEV_POSITION(accumalated degrees) {
	int ELEV_POSITION*scale factor;
	return ELEV_POSITION;
}

Testing Results:

Misc: Write functions for turning left and right?
4096 is the ticks measured per rotation,
100ms is the time interval in which encoder gets a value,
	Velocity is measured in sensor units per 100ms. This ensures sufficient resolution regardless of the sensing strategy.	
	For example, when using the CTRE Magnetic Encoder, 1u velocity represents 1/4096 of a rotation every 100ms.
	Generally you can multiply the velocity units by 600/UnitsPerRotation to obtain RPM.
	Tachometer velocity measurement is unique in that it measures time directly.
	As a result, the reported velocity is calculated where 1024 represents a full "rotation".
	This means that a velocity measurement of 1 represents 1/1024 of a rotation every 100ms.
The idea is that the divide by 600 results in 100 millisecond portrait, 4096 converts rotation to ticks of a rotation.

WRITE FUNCTIONS FOR DRIVING FOWARD, TURNING, ETC.